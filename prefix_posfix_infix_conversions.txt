Algorithm for Prefix to Postfix: 

Read the Prefix expression in reverse order (from right to left)
If the symbol is an operand, then push it onto the Stack
If the symbol is an operator, then pop two operands from the Stack 
Create a string by concatenating the two operands and the operator after them. 
string = operand1 + operand2 + operator 
And push the resultant string back to Stack
Repeat the above steps until end of Prefix expression. 

Algorithm for Postfix to Prefix: 
 
Read the Postfix expression from left to right
If the symbol is an operand, then push it onto the Stack
If the symbol is an operator, then pop two operands from the Stack 
Create a string by concatenating the two operands and the operator before them. 
string = operator + operand2 + operand1 
And push the resultant string back to Stack
Repeat the above steps until end of Postfix expression.

Algorithm for Postfix to Infix

Read the Posfix expression in order (left to right)
If the symbol is an operand, push it onto the stack. 
If the symbol is an operator. 
      Pop the top 2 values from the stack. 
      Put the operator, with the values as arguments and form a string. 
      Push the resulted string back to stack. 
If there is only one value in the stack
      That value in the stack is the desired infix string. 
 
Algorithm for Prefix to Infix

Read the Prefix expression in reverse order (from right to left)
If the symbol is an operand, then push it onto the Stack
If the symbol is an operator:
      Pop two operands from the Stack 
      Create a string by concatenating the two operands and the operator between them. 
      string = (operand1 + operator + operand2) 
      push the resultant string back to Stack
Repeat the above steps until end of Prefix expression

Infix to Posfix
 
1. Scan the infix expression from left to right. 
2. If the scanned character is an operand, output it. 
3. Else, 
      1 If the precedence of the scanned operator is greater than the precedence of the operator in the stack(or the stack is empty or the stack contains a ‘(‘ ), push it. 
      2 Else, Pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. After doing that Push the scanned operator to the stack. (If you encounter parenthesis while popping then stop there and push the scanned operator in the stack.) 
4. If the scanned character is an ‘(‘, push it to the stack. 
5. If the scanned character is an ‘)’, pop the stack and output it until a ‘(‘ is encountered, and discard both the parenthesis. 
6. Repeat steps 2-6 until infix expression is scanned. 
7. Print the output 
8. Pop and output from the stack until it is not empty.









